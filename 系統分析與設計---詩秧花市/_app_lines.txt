    2:   orders: "poemseeding-orders",
    3:   users: "poemseeding-users",
    4:   auth: "poemseeding-auth",
    6: 
    7: const ORDER_STATUS = [
    8:   "pending",
    9:   "confirmed",
   10:   "designing",
   11:   "arranging",
   12:   "ready",
   13:   "completed",
   14:   "canceled",
   15: ];
   16: 
   18:   pending: "\u5f85\u78ba\u8a8d",
   19:   confirmed: "\u5df2\u78ba\u8a8d",
   20:   designing: "\u8a2d\u8a08\u4e2d",
   21:   arranging: "\u88fd\u4f5c\u4e2d",
   22:   ready: "\u5f85\u53d6\u8ca8",
   23:   completed: "\u5df2\u5b8c\u6210",
   24:   canceled: "\u5df2\u53d6\u6d88",
   26: 
   29:     label: "\u4ec1\u6b66\u5de5\u4f5c\u5ba4\u81ea\u53d6",
   30:     fee: 0,
   33:     label: "\u53f0\u5357\u5de5\u4f5c\u5ba4\u81ea\u53d6",
   34:     fee: 0,
   37:     label: "Lalamove \u914d\u9001",
   38:     fee: 250,
   41:     label: "\u9ed1\u8c93\u4f4e\u6eab\u5bbf\u914d",
   42:     fee: 320,
   45: 
   47:   return JSON.parse(localStorage.getItem(key) || "[]");
   49: 
   51:   localStorage.setItem(key, JSON.stringify(data));
   53: 
   55:   return JSON.parse(localStorage.getItem(STORAGE_KEYS.auth) || "null");
   57: 
   60:     localStorage.setItem(STORAGE_KEYS.auth, JSON.stringify(payload));
   62:     localStorage.removeItem(STORAGE_KEYS.auth);
   65: 
   67:   return STATUS_LABELS[status] || status;
   69: 
   73: 
   75:   const info = DELIVERY_METHODS[method];
   76:   return info ? info.label : method;
   78: 
   80:   let users = loadCollection(STORAGE_KEYS.users);
   81:   const now = new Date().toISOString();
   83:     const existing = users.find((user) => user.email === payload.email);
   85:       existing.id = payload.id;
   86:       existing.name = payload.name;
   87:       existing.phone = payload.phone;
   88:       existing.role = payload.role;
   89:       existing.password = payload.password;
   90:       existing.updated_at = now;
   93:         ...payload,
   94:         created_at: now,
   95:         updated_at: now,
   99: 
  101:     id: "U001",
  102:     name: "詩秧花室",
  103:     email: "owner@poemseeding.com",
  104:     phone: "0935-111-222",
  105:     role: "owner",
  106:     password: "owner123",
  108: 
  110:     id: "U100",
  111:     name: "林小姐",
  112:     email: "member@example.com",
  113:     phone: "0983-456-789",
  114:     role: "member",
  115:     password: "member123",
  117: 
  118:   saveCollection(STORAGE_KEYS.users, users);
  119: 
  121:     const demoOrders = buildDemoOrders();
  122:     saveCollection(STORAGE_KEYS.orders, demoOrders);
  125: 
  127:   const today = new Date();
  129:     const date = new Date(base);
  130:     date.setDate(date.getDate() + days);
  131:     return date.toISOString().slice(0, 10);
  133:   const now = new Date().toISOString();
  134: 
  136:     user_id: "U100",
  137:     receiver_name: "林小姐",
  138:     receiver_phone: "0983-456-789",
  139:     created_at: now,
  140:     updated_at: now,
  141:     status_updated_at: now,
  143: 
  144:   return [
  146:       ...base,
  147:       id: "PO-DEMO-001",
  148:       custom_title: "秋日暖陽桌花",
  149:       product_description: "暖杏與米白色調，擺放在咖啡廳入口迎賓桌。",
  150:       budget_min: 2200,
  151:       budget_max: 2800,
  152:       preferred_palette: "暖杏 / 米白 / 焦糖",
  153:       flower_preferences: "玫瑰 / 康乃馨 / 兔尾草",
  154:       avoid_flowers: "不使用百合",
  155:       purpose: "咖啡廳開幕佈置",
  156:       card_message: "祝開幕生意興隆、門庭若市。",
  157:       delivery_method: "pickup_kaohsiung",
  158:       delivery_fee: 0,
  159:       pickup_slot: "下午 15:00-17:00",
  160:       delivery_address: "",
  161:       preferred_delivery_window: "",
  162:       scheduled_date: addDays(today, 5),
  163:       status: "confirmed",
  164:       owner_note: "已與客人確認預算與色系，準備進入設計階段。",
  165:       canceled_reason: "",
  168:       ...base,
  169:       id: "PO-DEMO-002",
  170:       custom_title: "訂婚典禮捧花",
  171:       product_description: "粉橘與奶茶色系，搭配棉花與乾燥尤加利葉。",
  172:       budget_min: 3200,
  173:       budget_max: 3800,
  174:       preferred_palette: "粉橘 / 蜜桃 / 裸色",
  175:       flower_preferences: "棉花 / 尤加利 / 玫瑰",
  176:       avoid_flowers: "",
  177:       purpose: "訂婚儀式",
  178:       card_message: "期待與你攜手走過每個季節。",
  179:       delivery_method: "blackcat",
  180:       delivery_fee: 320,
  181:       pickup_slot: "",
  182:       delivery_address: "台北市大安區和平東路53巷18號3樓",
  183:       preferred_delivery_window: "14:00-18:00",
  184:       scheduled_date: addDays(today, 7),
  185:       status: "pending",
  186:       owner_note: "",
  187:       canceled_reason: "",
  190:       ...base,
  191:       id: "PO-DEMO-003",
  192:       custom_title: "咖啡廳開幕桌花",
  193:       product_description: "奶油白搭配金色點綴，希望呈現溫柔的穩定感。",
  194:       budget_min: 3000,
  195:       budget_max: 3600,
  196:       preferred_palette: "奶油白 / 金色",
  197:       flower_preferences: "玫瑰 / 小菊",
  198:       avoid_flowers: "",
  199:       purpose: "店面開幕",
  200:       card_message: "恭祝隆重開幕，客似雲來！",
  201:       delivery_method: "lalamove",
  202:       delivery_fee: 250,
  203:       pickup_slot: "",
  204:       delivery_address: "高雄市苓雅區成功二路88號",
  205:       preferred_delivery_window: "10:00-12:00",
  206:       scheduled_date: addDays(today, 6),
  207:       status: "designing",
  208:       owner_note: "依空間照片調整高度與擺設動線。",
  209:       canceled_reason: "",
  212:       ...base,
  213:       id: "PO-DEMO-004",
  214:       custom_title: "生日花束",
  215:       product_description: "需要溫柔粉色系，且避免百合的香味。",
  216:       budget_min: 1800,
  217:       budget_max: 2200,
  218:       preferred_palette: "溫柔粉 / 奶油色",
  219:       flower_preferences: "玫瑰 / 乒乓菊",
  220:       avoid_flowers: "百合",
  221:       purpose: "生日祝福",
  222:       card_message: "生日快樂，天天都像花一樣綻放。",
  223:       delivery_method: "pickup_tainan",
  224:       delivery_fee: 0,
  225:       pickup_slot: "上午 11:00-13:00",
  226:       delivery_address: "",
  227:       preferred_delivery_window: "",
  228:       scheduled_date: addDays(today, 8),
  229:       status: "arranging",
  230:       owner_note: "花材已處理完成，安排明日組裝。",
  231:       canceled_reason: "",
  234:       ...base,
  235:       id: "PO-DEMO-005",
  236:       custom_title: "教師節謝師禮",
  237:       product_description: "暖色系花束，附上客製卡片表達感謝。",
  238:       budget_min: 1500,
  239:       budget_max: 1800,
  240:       preferred_palette: "暖黃 / 杏色",
  241:       flower_preferences: "康乃馨",
  242:       avoid_flowers: "",
  243:       purpose: "教師節禮物",
  244:       card_message: "謝謝老師的照顧與教導。",
  245:       delivery_method: "pickup_kaohsiung",
  246:       delivery_fee: 0,
  247:       pickup_slot: "下午 15:00-17:00",
  248:       delivery_address: "",
  249:       preferred_delivery_window: "",
  250:       scheduled_date: addDays(today, 10),
  251:       status: "ready",
  252:       owner_note: "花束已完成，放置保護盒等待取貨。",
  253:       canceled_reason: "",
  256:       ...base,
  257:       id: "PO-DEMO-006",
  258:       custom_title: "新居落成桌花",
  259:       product_description: "米杏白色調，搭配乾燥葉材呈現極簡氛圍。",
  260:       budget_min: 2800,
  261:       budget_max: 3200,
  262:       preferred_palette: "米杏白 / 淺金",
  263:       flower_preferences: "滿天星 / 棉花",
  264:       avoid_flowers: "",
  265:       purpose: "新居落成",
  266:       card_message: "恭喜入厝，新家充滿美好時光！",
  267:       delivery_method: "blackcat",
  268:       delivery_fee: 320,
  269:       pickup_slot: "",
  270:       delivery_address: "新北市板橋區文化路二段108號",
  271:       preferred_delivery_window: "16:00-20:00",
  272:       scheduled_date: addDays(today, 12),
  273:       status: "completed",
  274:       owner_note: "已通知客戶完成配送，照片備份於相簿。",
  275:       canceled_reason: "",
  278:       ...base,
  279:       id: "PO-DEMO-007",
  280:       custom_title: "臨時改期訂單",
  281:       product_description: "原預定的告白花束因行程改期，需要取消。",
  282:       budget_min: 2000,
  283:       budget_max: 2400,
  284:       preferred_palette: "紅 / 粉",
  285:       flower_preferences: "玫瑰 / 粉桔梗",
  286:       avoid_flowers: "",
  287:       purpose: "告白驚喜",
  288:       card_message: "期待下次與你相見。",
  289:       delivery_method: "lalamove",
  290:       delivery_fee: 250,
  291:       pickup_slot: "",
  292:       delivery_address: "高雄市苓雅區四維一路88號",
  293:       preferred_delivery_window: "18:00-20:00",
  294:       scheduled_date: addDays(today, 9),
  295:       status: "canceled",
  296:       owner_note: "",
  297:       canceled_reason: "會員因行程調整主動取消",
  299:   ];
  301: 
  303:   const currentOrders = loadCollection(STORAGE_KEYS.orders);
  304:   const demoOrders = buildDemoOrders();
  305:   const existingIds = new Set(currentOrders.map((order) => order.id));
  306:   const toAdd = demoOrders.filter((order) => !existingIds.has(order.id));
  310:   const merged = [...currentOrders, ...toAdd];
  311:   saveCollection(STORAGE_KEYS.orders, merged);
  314: 
  317:     return "-";
  320:     style: "currency",
  321:     currency: "TWD",
  322:     maximumFractionDigits: 0,
  325: 
  327:   const today = new Date();
  328:   today.setDate(today.getDate() + 5);
  329:   return today.toISOString().slice(0, 10);
  331: 
  333:   const users = loadCollection(STORAGE_KEYS.users);
  334:   const match = users.find(
  335:     (user) =>
  336:       user.email.toLowerCase() === email.toLowerCase() &&
  337:       user.password === password
  338:   );
  339:   if (!match) return null;
  340: 
  342:     user_id: match.id,
  343:     role: match.role,
  344:     name: match.name,
  345:     email: match.email,
  347:   return match;
  349: 
  351:   const auth = loadAuth();
  353:     const current = window.location.pathname.split("/").pop() || "index.html";
  355:     return null;
  358:     window.location.href = "index.html";
  359:     return null;
  361:   return auth;
  363: 
  365:   const badge = document.querySelector("[data-auth-badge]");
  366:   const auth = loadAuth();
  367:   if (!badge) return;
  368: 
  369:   const orderLinks = document.querySelectorAll(\"[data-order-link]\");
  370:   const orderHref = auth ? \"order-new.html\" : \"login.html?redirect=order-new.html\";
  371:   orderLinks.forEach((link) => link.setAttribute(\"href\", orderHref));
  372: 
  374:     const roleLabel = auth.role === \"owner\" ? \"業主\" : \"會員\";
  375:     badge.innerHTML = 
  376:       <span class=\"badge\">
  377:         ?
  378:       </span>
  379:       <button class=\"btn btn--light\" data-logout>登出</button>
  380:     ;
  381: 
  383:       saveAuth(null);
  384:       window.location.href = \"login.html\";
  387:     badge.innerHTML = 
  388:       <a href=\"login.html\" class=\"btn btn--light\">登入</a>
  389:     ;
  393:   const form = document.querySelector("form");
  394:   if (!form) return;
  395: 
  396:   const searchParams = new URLSearchParams(window.location.search);
  397:   const redirectTarget = searchParams.get("redirect");
  398: 
  400:     event.preventDefault();
  401:     const formData = new FormData(form);
  402:     const email = formData.get("email");
  403:     const password = formData.get("password");
  404: 
  405:     const user = authenticate(email, password);
  407:       alert("帳號或密碼錯誤，請再試一次。");
  408:       return;
  410: 
  412:       window.location.href = redirectTarget;
  413:       return;
  415: 
  416:     window.location.href =
  417:       user.role === "owner" ? "admin-dashboard.html" : "orders.html";
  420: 
  422:   const form = document.querySelector("form");
  423:   if (!form) return;
  424: 
  426:     event.preventDefault();
  427:     const formData = new FormData(form);
  428:     const name = formData.get("name");
  429:     const email = formData.get("email");
  430:     const phone = formData.get("phone");
  431:     const password = formData.get("password");
  432: 
  433:     const users = loadCollection(STORAGE_KEYS.users);
  435:       alert("這個 Email 已有人使用，請改用其他 Email。");
  436:       return;
  438: 
  441:       name,
  442:       email,
  443:       phone,
  444:       role: "member",
  445:       password,
  446:       created_at: new Date().toISOString(),
  448:     users.push(newUser);
  449:     saveCollection(STORAGE_KEYS.users, users);
  451:       user_id: newUser.id,
  452:       role: "member",
  453:       name: newUser.name,
  454:       email: newUser.email,
  456:     alert("註冊成功！現在為您導向下單頁面。");
  457:     window.location.href = "order-new.html";
  460: 
  463:     .toISOString()
  464:     .slice(0, 7)
  466: 
  467:   const scheduledDate = formData.get("scheduled_date");
  468:   const earliest = computeEarliestDate();
  472: 
  473:   const deliveryMethod = formData.get("delivery_method");
  474:   const methodInfo = DELIVERY_METHODS[deliveryMethod];
  475: 
  477:     id,
  478:     user_id: auth.user_id,
  479:     custom_title: formData.get("custom_title"),
  480:     product_description: formData.get("product_description"),
  481:     budget_min: Number(formData.get("budget_min")),
  482:     budget_max: Number(formData.get("budget_max")),
  483:     preferred_palette: formData.get("preferred_palette"),
  484:     flower_preferences: formData.get("flower_preferences"),
  485:     avoid_flowers: formData.get("avoid_flowers"),
  486:     purpose: formData.get("purpose"),
  487:     card_message: formData.get("card_message"),
  488:     delivery_method: deliveryMethod,
  489:     delivery_fee: methodInfo?.fee ?? 0,
  490:     receiver_name: formData.get("receiver_name"),
  491:     receiver_phone: formData.get("receiver_phone"),
  492:     pickup_slot: formData.get("pickup_slot") || "",
  493:     delivery_address: formData.get("delivery_address") || "",
  494:     preferred_delivery_window: formData.get("preferred_delivery_window") || "",
  495:     scheduled_date: scheduledDate,
  496:     status: "pending",
  497:     status_updated_at: new Date().toISOString(),
  498:     owner_note: "",
  499:     canceled_reason: "",
  500:     created_at: new Date().toISOString(),
  501:     updated_at: new Date().toISOString(),
  504: 
  506:   const auth = requireAuth(["member"]);
  507:   if (!auth) return;
  508: 
  509:   const earliestInput = document.querySelector("[data-earliest-date]");
  510:   const dateField = document.querySelector('input[name="scheduled_date"]');
  512:     const earliest = computeEarliestDate();
  513:     earliestInput.textContent = earliest;
  514:     dateField.min = earliest;
  516: 
  517:   const form = document.querySelector("form");
  518:   if (!form) return;
  519: 
  521:     event.preventDefault();
  522:     const formData = new FormData(form);
  523: 
  525:       const payload = assembleOrderPayload(formData, auth);
  526:       const orders = loadCollection(STORAGE_KEYS.orders);
  527:       orders.push(payload);
  528:       saveCollection(STORAGE_KEYS.orders, orders);
  529:       alert("訂單送出成功，我們會在 24 小時內與您聯繫確認細節。");
  530:       window.location.href = "orders.html";
  532:       alert(error.message);
  535: 
  536:   const deliverySelect = form.querySelector('select[name="delivery_method"]');
  537:   const feeBadge = document.querySelector("[data-delivery-fee]");
  540:       const selected = deliverySelect.value;
  541:       const method = DELIVERY_METHODS[selected];
  542:       feeBadge.textContent = method
  544:         : "";
  545:       const pickupSection = document.querySelector("[data-pickup-section]");
  546:       const deliverySection = document.querySelector("[data-delivery-section]");
  549:           pickupSection.style.display = "grid";
  550:           deliverySection.style.display = "none";
  552:           pickupSection.style.display = "none";
  553:           deliverySection.style.display = "grid";
  557:     deliverySelect.addEventListener("change", updateFee);
  558:     updateFee();
  561: 
  563:   const auth = requireAuth(["member"]);
  564:   if (!auth) return;
  565: 
  566:   const allOrders = loadCollection(STORAGE_KEYS.orders)
  567:     .filter((order) => order.user_id === auth.user_id)
  568:     .sort((a, b) => (a.scheduled_date > b.scheduled_date ? 1 : -1));
  569: 
  570:   const list = document.querySelector("[data-order-list]");
  571:   const filterForm = document.querySelector("[data-member-filter]");
  572:   if (!list) return;
  573: 
  576:       list.innerHTML = '<div class="empty-state">目前尚無符合條件的訂單。</div>';
  577:       return;
  579: 
  580:     list.innerHTML = dataset
  582:         const methodLabel = formatDelivery(order.delivery_method);
  583:         const statusLabel = formatStatus(order.status);
  584:         return `
  585:           <article class="card">
  588:             </div>
  593:             <div class="chip-group">
  595:             </div>
  596:             <p style="color: var(--muted-color); font-size: 0.85rem; margin-top: 1rem;">
  597:               若需調整或取消訂單，請透過官方聯絡方式與花藝師聯繫，我們會協助處理。
  598:             </p>
  599:           </article>
  600:         `;
  602:       .join("");
  604: 
  607:       renderOrders(allOrders);
  608:       return;
  610:     const formData = new FormData(filterForm);
  611:     const from = formData.get("from");
  612:     const to = formData.get("to");
  614:       if (from && order.scheduled_date < from) return false;
  615:       if (to && order.scheduled_date > to) return false;
  616:       return true;
  618:     renderOrders(filtered);
  620: 
  621:   applyFilters();
  622: 
  624:     event.preventDefault();
  625:     applyFilters();
  627: 
  629:     setTimeout(applyFilters, 0);
  631: 
  633:     const target = event.target;
  634:     if (!(target instanceof HTMLElement)) return;
  635:     const orderId = target.dataset.view;
  636:     if (!orderId) return;
  637: 
  638:     localStorage.setItem("poemseeding-selected-order", orderId);
  639:     window.location.href = "order-detail.html";
  642: 
  644:   const auth = requireAuth(["member"]);
  645:   if (!auth) return;
  646: 
  647:   const selectedId = localStorage.getItem("poemseeding-selected-order");
  649:     window.location.href = "orders.html";
  650:     return;
  652: 
  653:   const order = loadCollection(STORAGE_KEYS.orders).find(
  654:     (item) => item.id === selectedId
  655:   );
  657:     window.location.href = "orders.html";
  658:     return;
  660: 
  661:   const detail = document.querySelector("[data-order-detail]");
  662:   if (!detail) return;
  663: 
  664:   const methodLabel = formatDelivery(order.delivery_method);
  665:   detail.innerHTML = `
  666:     <section class="card">
  669:       </div>
  672:       <div class="timeline">
  674:       </div>
  675:     </section>
  676:     <section class="card">
  677:       <h3>訂製需求</h3>
  679:       <div class="chip-group">
  682:       </div>
  687:     </section>
  688:     <section class="card">
  689:       <h3>取貨與配送</h3>
  693:         order.pickup_slot
  700:     </section>
  702:       order.owner_note
  703:         ? `<section class="card">
  704:             <h3>設計備註</h3>
  706:           </section>`
  707:         : ""
  709:   `;
  711: 
  713:   const defaultFlow = ORDER_STATUS.filter((status) => status !== "canceled");
  714:   const canceledFlow = ["pending", "confirmed", "canceled"];
  715:   const steps = order.status === "canceled" ? canceledFlow : defaultFlow;
  716: 
  717:   return steps
  719:       const label = formatStatus(status);
  720:       const active = status === order.status;
  721:       const reached = ORDER_STATUS.indexOf(order.status) >= ORDER_STATUS.indexOf(status);
  722:       const timestamp = reached ? order.status_updated_at : "";
  723:       return `
  724:         <div class="timeline__item">
  728:         </div>
  729:       `;
  731:     .join("");
  733: 
  735:   const auth = requireAuth(["owner"]);
  736:   if (!auth) return;
  737: 
  738:   let orders = loadCollection(STORAGE_KEYS.orders);
  739:   let filteredOrders = [...orders];
  740:   let activeDetailId = null;
  741: 
  742:   const summaryEl = document.querySelector("[data-admin-summary]");
  743:   const tableBody = document.querySelector("[data-admin-table]");
  744:   const detailPanel = document.querySelector("[data-admin-detail]");
  745:   const detailBody = document.querySelector("[data-admin-detail-body]");
  746:   const detailTitle = document.querySelector("[data-detail-title]");
  747:   const detailClose = document.querySelector("[data-detail-close]");
  748:   const filtersForm = document.querySelector("[data-admin-filters]");
  749:   const resetBtn = filtersForm?.querySelector("[data-reset]");
  750:   const statusFilter = filtersForm?.querySelector('select[name="status"]');
  751:   const filterSummary = filtersForm?.querySelector("[data-filter-summary]");
  752:   const demoButton = filtersForm?.querySelector("[data-demo-seed]");
  753: 
  754:   if (!tableBody || !filtersForm) return;
  755: 
  758:       const option = document.createElement("option");
  759:       option.value = status;
  760:       option.textContent = formatStatus(status);
  761:       statusFilter.appendChild(option);
  764: 
  765:   const formatDateTime = (value) => (value ? value.slice(0, 16).replace('T', ' ') : '—');
  766: 
  768:     if (!summaryEl) return;
  769:     const today = new Date();
  770:     today.setHours(0, 0, 0, 0);
  771:     const weekAhead = new Date(today);
  772:     weekAhead.setDate(today.getDate() + 7);
  773: 
  774:     const countPending = dataset.filter((order) => order.status === "pending").length;
  775:     const countInProgress = dataset.filter((order) => ["confirmed", "designing", "arranging"].includes(order.status)).length;
  777:       if (order.status === "canceled") return false;
  778:       const date = new Date(order.scheduled_date);
  779:       if (Number.isNaN(date.getTime())) return false;
  780:       return date >= today && date <= weekAhead;
  782:     const countCompleted = dataset.filter((order) => order.status === "completed").length;
  783: 
  784:     summaryEl.innerHTML = [
  789:     ]
  790:       .map(
  791:         (card) => `
  792:           <article class="summary-card">
  796:           </article>
  797:         `
  798:       )
  799:       .join("");
  801: 
  802:   const buildStatusOptions = (current) =>
  803:     ORDER_STATUS.map(
  804:       (status) =>
  806:     ).join("");
  807: 
  809:     tableBody
  810:       .querySelectorAll("tr")
  811:       .forEach((row) => row.classList.toggle("is-active", row.dataset.rowId === activeDetailId));
  813: 
  816:       tableBody.innerHTML = `
  817:         <tr>
  818:           <td colspan="7" style="text-align:center;color:var(--muted-color);padding:2rem;">
  819:             目前沒有符合條件的訂單。
  820:           </td>
  821:         </tr>
  822:       `;
  823:       return;
  825: 
  826:     tableBody.innerHTML = dataset
  828:         const methodLabel = formatDelivery(order.delivery_method);
  829:         const statusLabel = formatStatus(order.status);
  830:         const activeClass = activeDetailId === order.id ? ' class="is-active"' : '';
  831:         return `
  833:             <td>
  836:             </td>
  841:             <td>
  843:             </td>
  844:             <td>
  845:               <div class="admin-actions">
  848:                 </select>
  851:               </div>
  852:             </td>
  853:           </tr>
  854:         `;
  856:       .join("");
  858: 
  860:     if (!detailPanel || !detailBody) return;
  861:     activeDetailId = order.id;
  862:     detailTitle.textContent = order.custom_title || "訂單詳情";
  863:     const methodLabel = formatDelivery(order.delivery_method);
  864:     const deliveryOptions = Object.entries(DELIVERY_METHODS)
  866:       .join("");
  867: 
  868:     detailBody.innerHTML = `
  869:       <div class="admin-detail__section">
  871:         <div class="admin-detail__meta">
  875:         </div>
  876:       </div>
  877:       <form class="admin-detail__form" data-admin-edit>
  878:         <div class="admin-detail__section">
  879:           <h3>取貨／配送</h3>
  880:           <label class="field">
  881:             <span>預計日期</span>
  883:           </label>
  884:           <label class="field">
  885:             <span>配送方式</span>
  887:           </label>
  888:           <label class="field" data-pickup>
  889:             <span>自取時段</span>
  891:           </label>
  892:           <label class="field" data-delivery>
  893:             <span>配送地址</span>
  895:           </label>
  896:           <label class="field" data-delivery>
  897:             <span>配送時段</span>
  899:           </label>
  900:         </div>
  901:         <div class="admin-detail__section">
  902:           <h3>訂製資訊</h3>
  903:           <label class="field">
  904:           <span>需求描述</span>
  906:           </label>
  907:           <label class="field">
  908:             <span>用途</span>
  910:           </label>
  911:           <label class="field">
  912:             <span>色系偏好</span>
  914:           </label>
  915:           <label class="field">
  916:             <span>喜歡花材</span>
  918:           </label>
  919:           <label class="field">
  920:             <span>避免花材</span>
  922:           </label>
  923:           <label class="field">
  924:             <span>祝福文字</span>
  926:           </label>
  927:           <label class="field">
  928:             <span>業主備註</span>
  930:           </label>
  931:         </div>
  932:         <div class="admin-detail__form-actions">
  933:           <button type="submit" class="btn">儲存修改</button>
  934:         </div>
  935:       </form>
  936:     `;
  937: 
  938:     detailPanel.removeAttribute("hidden");
  939:     highlightActiveRow();
  940: 
  941:     const editForm = detailBody.querySelector("[data-admin-edit]");
  942:     if (!editForm) return;
  943: 
  944:     const methodSelect = editForm.querySelector('[name="delivery_method"]');
  945:     const pickupFields = editForm.querySelectorAll('[data-pickup]');
  946:     const deliveryFields = editForm.querySelectorAll('[data-delivery]');
  949:         pickupFields.forEach((el) => (el.style.display = 'flex'));
  950:         deliveryFields.forEach((el) => (el.style.display = 'none'));
  952:         pickupFields.forEach((el) => (el.style.display = 'none'));
  953:         deliveryFields.forEach((el) => (el.style.display = 'flex'));
  956:     methodSelect.addEventListener('change', syncMethodFields);
  957:     syncMethodFields();
  958: 
  960:       event.preventDefault();
  961:       const formData = new FormData(editForm);
  962:       order.scheduled_date = formData.get('scheduled_date');
  963:       order.delivery_method = formData.get('delivery_method');
  965:         order.pickup_slot = formData.get('pickup_slot')?.trim() || '';
  966:         order.delivery_address = '';
  967:         order.preferred_delivery_window = '';
  969:         order.pickup_slot = '';
  970:         order.delivery_address = formData.get('delivery_address')?.trim() || '';
  971:         order.preferred_delivery_window = formData.get('preferred_delivery_window')?.trim() || '';
  973:       order.product_description = formData.get('product_description')?.trim() || '';
  974:       order.purpose = formData.get('purpose')?.trim() || '';
  975:       order.preferred_palette = formData.get('preferred_palette')?.trim() || '';
  976:       order.flower_preferences = formData.get('flower_preferences')?.trim() || '';
  977:       order.avoid_flowers = formData.get('avoid_flowers')?.trim() || '';
  978:       order.card_message = formData.get('card_message')?.trim() || '';
  979:       order.owner_note = formData.get('owner_note')?.trim() || '';
  980:       order.updated_at = new Date().toISOString();
  981:       saveCollection(STORAGE_KEYS.orders, orders);
  982:       renderSummary(orders);
  983:       applyFilters(false);
  984:       renderDetail(order);
  985:       alert('訂單資料已更新，已通知會員。');
  988: 
  990:     const formData = new FormData(filtersForm);
  991:     const from = formData.get('from');
  992:     const to = formData.get('to');
  993:     const status = formData.get('status');
  994:     const keywordRaw = formData.get('keyword') || '';
  995:     const keyword = keywordRaw.trim().toLowerCase();
  996: 
  998:       if (from && order.scheduled_date < from) return false;
  999:       if (to && order.scheduled_date > to) return false;
 1000:       if (status && order.status !== status) return false;
 1002:         const haystack = [
 1003:           order.custom_title,
 1004:           order.receiver_name,
 1005:           order.receiver_phone,
 1006:           order.id,
 1007:           order.delivery_address,
 1008:           order.product_description,
 1009:         ]
 1010:           .filter(Boolean)
 1011:           .join(' ')
 1012:           .toLowerCase();
 1013:         if (!haystack.includes(keyword)) return false;
 1015:       return true;
 1017: 
 1018:     renderRows(filteredOrders);
 1019:     highlightActiveRow();
 1020: 
 1022:       filterSummary.textContent = filteredOrders.length
 1024:         : '目前沒有符合條件的訂單';
 1026: 
 1028:       const activeOrder = orders.find((item) => item.id === activeDetailId);
 1030:         renderDetail(activeOrder);
 1032:         detailPanel?.setAttribute('hidden', '');
 1033:         activeDetailId = null;
 1037: 
 1039:     event.preventDefault();
 1040:     applyFilters();
 1042: 
 1044:     filtersForm.reset();
 1045:     applyFilters();
 1047: 
 1049:     detailPanel?.setAttribute('hidden', '');
 1050:     activeDetailId = null;
 1051:     highlightActiveRow();
 1053: 
 1055:     const target = event.target;
 1056:     if (!(target instanceof HTMLElement)) return;
 1057:     const viewId = target.dataset.view;
 1058:     const saveId = target.dataset.save;
 1059: 
 1061:       const order = orders.find((item) => item.id === viewId);
 1062:       if (!order) return;
 1063:       renderDetail(order);
 1064:       return;
 1066: 
 1069:       if (!select) return;
 1070:       const nextStatus = select.value;
 1072:         alert('請選擇合法的狀態。');
 1073:         return;
 1075:       const order = orders.find((item) => item.id === saveId);
 1076:       if (!order) return;
 1078:         alert('狀態未變更。');
 1079:         return;
 1081:       order.status = nextStatus;
 1082:       order.status_updated_at = new Date().toISOString();
 1083:       order.updated_at = new Date().toISOString();
 1085:         const reason = prompt('請輸入取消原因（可留空）', order.canceled_reason || '');
 1086:         order.canceled_reason = reason ? reason.trim() : '業主取消';
 1088:         order.canceled_reason = '';
 1090:       saveCollection(STORAGE_KEYS.orders, orders);
 1091:       renderSummary(orders);
 1092:       applyFilters();
 1094:         const updated = orders.find((item) => item.id === saveId);
 1095:         if (updated) renderDetail(updated);
 1097:       alert('訂單狀態已更新。');
 1100: 
 1102:     const confirmed = window.confirm('匯入測試資料將新增示範訂單，是否繼續？');
 1103:     if (!confirmed) return;
 1104:     const result = injectDemoOrders();
 1105:     orders = loadCollection(STORAGE_KEYS.orders);
 1106:     renderSummary(orders);
 1107:     applyFilters();
 1110: 
 1111:   document
 1112:     .querySelector('[data-export]')
 1113:     ?.addEventListener('click', () => exportCsv(filteredOrders));
 1114: 
 1115:   renderSummary(orders);
 1116:   applyFilters();
 1118: 
 1121:     alert("目前沒有可匯出的資料。");
 1122:     return;
 1124: 
 1125:   const header = [
 1126:     "訂單編號",
 1127:     "會員姓名",
 1128:     "會員電話",
 1129:     "會員 Email",
 1130:     "預約日期",
 1131:     "配送方式",
 1132:     "自取時段",
 1133:     "配送地址",
 1134:     "配送時段",
 1135:     "預算下限",
 1136:     "預算上限",
 1137:     "運費",
 1138:     "狀態",
 1139:     "最新狀態時間",
 1140:     "用途",
 1141:     "需求描述",
 1142:     "色系偏好",
 1143:     "喜歡花材",
 1144:     "避免花材",
 1145:     "祝福文字",
 1146:     "業主備註",
 1147:   ];
 1148: 
 1149:   const users = loadCollection(STORAGE_KEYS.users);
 1151:     const user = users.find((item) => item.id === order.user_id);
 1152:     return [
 1153:       order.id,
 1154:       user?.name || "",
 1155:       user?.phone || "",
 1156:       user?.email || "",
 1157:       order.scheduled_date,
 1158:       formatDelivery(order.delivery_method),
 1159:       order.pickup_slot,
 1160:       order.delivery_address,
 1161:       order.preferred_delivery_window,
 1162:       order.budget_min,
 1163:       order.budget_max,
 1164:       order.delivery_fee,
 1165:       formatStatus(order.status),
 1166:       order.status_updated_at,
 1167:       order.purpose,
 1168:       order.product_description,
 1169:       order.preferred_palette,
 1170:       order.flower_preferences,
 1171:       order.avoid_flowers,
 1172:       order.card_message,
 1173:       order.owner_note,
 1174:     ];
 1176: 
 1178:     if (value === undefined || value === null) return "";
 1179:     const safe = String(value);
 1182: 
 1183:   const csvContent = [header, ...rows]
 1184:     .map((cols) => cols.map(encodeCell).join(","))
 1185:     .join("\r\n");
 1186: 
 1188:   const url = URL.createObjectURL(blob);
 1189:   const link = document.createElement("a");
 1190:   link.href = url;
 1192:   document.body.appendChild(link);
 1193:   link.click();
 1194:   document.body.removeChild(link);
 1195:   URL.revokeObjectURL(url);
 1196:   alert("CSV 已匯出，請查看下載的檔案。");
 1199:   renderUserBadge();
 1200:   const cta = document.querySelector("[data-cta]");
 1203:       const auth = loadAuth();
 1205:         window.location.href = "order-new.html";
 1207:         window.location.href = "login.html?redirect=order-new.html";
 1212: 
 1214:   seedDataOnce();
 1215:   renderUserBadge();
 1216:   const page = document.body.dataset.page;
 1218:     case "landing":
 1219:       initLandingPage();
 1220:       break;
 1221:     case "login":
 1222:       initLoginPage();
 1223:       break;
 1224:     case "register":
 1225:       initRegisterPage();
 1226:       break;
 1227:     case "order-form":
 1228:       initOrderForm();
 1229:       break;
 1230:     case "member-orders":
 1231:       initMemberOrders();
 1232:       break;
 1233:     case "order-detail":
 1234:       initOrderDetail();
 1235:       break;
 1236:     case "admin-dashboard":
 1237:       initAdminDashboard();
 1238:       break;
 1241: 
 1242: 
 1243: 
 1244: 
 1245: 
 1246: 
 1247: 
 1248: 
 1249: 
